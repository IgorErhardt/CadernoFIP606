library(MASS)
library(tidyverse)
library(lme4)
library(drc)
InsectsDataframe = InsectSprays
InsectsDataframe |>
ggplot(aes(spray, count))+
geom_boxplot(outlier.color=NULL)+
geom_jitter(width=0.1)
InsectLM = lm(count ~ spray, data=InsectsDataframe)
plot(simulateResiduals(InsectLM))
shapiro.test(residuals(InsectLM))
InsectGLM= glm(count ~spray, data = InsectsDataframe, family=poisson)
mediasGLM = emmeans(InsectGLM, ~spray, type=("response"))
cld(mediasGLM)
check_model(InsectGLM)
summary(InsectGLM)
CornDf = gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
CornDf
CornDf$Id = interaction(CornDf$hybrid, CornDf$block)
MCorn = lmer(index ~hybrid*method + (1|block:Id), data=CornDf)
car::Anova(MCorn)
plot(simulateResiduals(MCorn))
CornDf$predicted <- predict(MCorn)
CornMeans = emmeans(MCorn, ~hybrid | method)
cld(CornMeans, Letters = letters)
CornMeans = emmeans(MCorn, ~method | hybrid)
cld(CornMeans, Letters = letters)
FungicideSensibility = gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
FungicideSensibility |>
group_by(code, dose) |>
summarise(germinationMean = mean(germination)) |>
ggplot(aes(dose, germinationMean))+
geom_point()+
facet_wrap(~code)
FGT43 = FungicideSensibility |>
group_by(code, dose) |>
summarise(germinationMean = mean(germination)) |>
filter(code=="FGT43")
FGT43Model = drm(germinationMean ~dose,
data=FGT43,
fct=LL.3())
plot(FGT43Model)
summary(FGT43Model)
AIC(FGT43Model)
EC50Df = estimate_EC50(germination ~ dose,
data=FungicideSensibility,
isolate_col = "code",
strata_col = "state",
interval = "delta",
fct= drc::LL.3())
library(DHARMa)
library(emmeans)
library(multcomp)
library(car)
library(performance)
library(gsheet)
library(ggplot2)
library(agricolae)
library(epifitter)
library(dplyr)
library(MASS)
library(tidyverse)
library(lme4)
library(drc)
library(ec50estimator)
InsectsDataframe = InsectSprays
InsectsDataframe |>
ggplot(aes(spray, count))+
geom_boxplot(outlier.color=NULL)+
geom_jitter(width=0.1)
InsectLM = lm(count ~ spray, data=InsectsDataframe)
plot(simulateResiduals(InsectLM))
shapiro.test(residuals(InsectLM))
InsectGLM= glm(count ~spray, data = InsectsDataframe, family=poisson)
mediasGLM = emmeans(InsectGLM, ~spray, type=("response"))
cld(mediasGLM)
check_model(InsectGLM)
summary(InsectGLM)
CornDf = gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
CornDf
CornDf$Id = interaction(CornDf$hybrid, CornDf$block)
MCorn = lmer(index ~hybrid*method + (1|block:Id), data=CornDf)
car::Anova(MCorn)
plot(simulateResiduals(MCorn))
CornDf$predicted <- predict(MCorn)
CornMeans = emmeans(MCorn, ~hybrid | method)
cld(CornMeans, Letters = letters)
CornMeans = emmeans(MCorn, ~method | hybrid)
cld(CornMeans, Letters = letters)
FungicideSensibility = gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
FungicideSensibility |>
group_by(code, dose) |>
summarise(germinationMean = mean(germination)) |>
ggplot(aes(dose, germinationMean))+
geom_point()+
facet_wrap(~code)
FGT43 = FungicideSensibility |>
group_by(code, dose) |>
summarise(germinationMean = mean(germination)) |>
filter(code=="FGT43")
FGT43Model = drm(germinationMean ~dose,
data=FGT43,
fct=LL.3())
plot(FGT43Model)
summary(FGT43Model)
AIC(FGT43Model)
EC50Df = estimate_EC50(germination ~ dose,
data=FungicideSensibility,
isolate_col = "code",
strata_col = "state",
interval = "delta",
fct= drc::LL.3())
EC50Df|>
ggplot(aes(reorder(ID,Estimate), Estimate))+
geom_point()+
coord_flip()
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Ajuste de Modelos"),
sidebarLayout(
sidebarPanel(
selectInput("model", "Tipo de Modelo:",
choices = c("Linear" = "lm",
"Polinomial (grau 2)" = "poly2",
"Exponencial" = "exp")),
sliderInput("n", "Número de Observações:", min = 10, max = 100, value = 30),
actionButton("go", "Gerar Dados")
),
mainPanel(
plotOutput("modelPlot")
)
)
)
server <- function(input, output) {
data <- eventReactive(input$go, {
x <- seq(1, 10, length.out = input$n)
y <- 3 + 2 * x + rnorm(input$n, 0, 2)
data.frame(x = x, y = y)
})
output$modelPlot <- renderPlot({
df <- data()
if (input$model == "lm") {
fit <- lm(y ~ x, data = df)
} else if (input$model == "poly2") {
fit <- lm(y ~ poly(x, 2), data = df)
} else {
fit <- lm(log(y) ~ x, data = df)
}
ggplot(df, aes(x, y)) +
geom_point() +
stat_smooth(method = "lm", formula = switch(input$model,
"lm" = y ~ x,
"poly2" = y ~ poly(x, 2),
"exp" = log(y) ~ x),
col = "blue") +
theme_minimal()
})
}
shinyApp(ui, server)
library(dplyr)
df %>%
filter(nota > 10) %>%
select(id, nota) %>%
mutate(pct = nota / max(nota)) %>%
arrange(desc(pct))
x <- 10        # atribui 10 a x
y = 5          # atribui 5 a y
pontuacao_aluno <- 90
.variavel_oculta <- 1   # válido, mas desaconselhado
nums <- c(1, 2, 3, 4)
seq_vezes <- seq(from=0, to=1, length.out=5)
intervalo <- 1:5
a <- c(1,2,3); b <- c(4,5,6)
a + b   # c(5,7,9)
a * 2   # c(2,4,6)
x <- c(1, 2, 3)
x > 1       # c(FALSE, TRUE, TRUE)
x >= 2 & x <= 3   # c(FALSE, TRUE, TRUE)
dados <- c(1, NA, 3)
na.omit(dados)         # c(1,3)
mean(dados, na.rm=TRUE)
misto <- c(TRUE, 2, "a")  # convertido para character
f <- factor(c("baixo","médio","alto"), levels=c("baixo","médio","alto"))
levels(f)
table(f)
d <- as.Date("2025-07-09", "%Y-%m-%d")
dt <- as.POSIXct("2025-07-09 15:00:00")
library(lubridate)
ymd("20250709")
mdy("07-09-2025")
hms("15:00:00")
lst <- list(nome="Igor", notas=c(90,95), aprovado=TRUE)
lst[["notas"]]
lst$aprovado
df <- data.frame(id=1:3, nota=c(10,20,15), stringsAsFactors=FALSE)
library(tibble)
tb <- tibble(id=1:3, nota=c(10,20,15))
library(dplyr)
df %>%
filter(nota > 10) %>%
select(id, nota) %>%
mutate(pct = nota / max(nota)) %>%
arrange(desc(pct))
df %>% group_by(id) %>% summarise(nota_media = mean(nota))
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +
geom_point(size=3) +
facet_wrap(~cyl) +
labs(
title = "MPG vs Peso por Cilindro",
x = "Peso (1000 lbs)",
y = "Milhas por Galão"
) +
theme_minimal()
dados <- c(1, NA, 3)
na.omit(dados)
#mean(dados, na.rm=TRUE)
dados <- c(1, NA, 3)
dados <- na.omit(dados)
mean(dados, na.rm=TRUE)
dados <- c(1, NA, 3)
dados
dados <- na.omit(dados)
dados
mean(dados, na.rm=TRUE)
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +
geom_point(size=3) +
facet_wrap(~cyl) +
labs(
title = "MPG vs Peso por Cilindro",
x = "Peso (1000 lbs)",
y = "Milhas por Galão"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +
geom_point(size=3) +
facet_wrap(~cyl) +
labs(
title = "MPG vs Peso por Cilindro",
x = "Peso (1000 lbs)",
y = "Milhas por Galão"
) +
theme_minimal()
# Histograma com densidade
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
geom_histogram(alpha=0.6, position="identity", bins=30) +
geom_density(alpha=0.4) +
labs(title="Distribuição do Comprimento da Sépala")
modelo <- lm(nota ~ id + I(id^2), data=df)
summary(modelo)
glm_bin <- glm(aprovado ~ nota, family=binomial, data=df)
for (i in 1:5) {
print(i^2)
}
cont <- 1
while (cont <= 5) {
print(cont)
cont <- cont + 1
}
repeat {
val <- runif(1)
if (val > 0.9) {
print(val)
break
}
}
x <- -3
if (x > 0) {
message("Positivo")
} else if (x == 0) {
message("Zero")
} else {
message("Negativo")
}
x <- c(-1, 0, 1)
resultado <- ifelse(x > 0, "Positivo", "Não positivo")
x <- c(-1, 0, 1)
resultado <- ifelse(x > 0, "Positivo", "Não positivo")
x <- c(-1, 0, 1)
resultado <- ifelse(x > 0, "Positivo", "Não positivo")
resultado
x <- 10        # atribui 10 a x
y = 5          # atribui 5 a y
pontuacao_aluno <- 90
.variavel_oculta <- 1   # válido, mas desaconselhado
nums <- c(1, 2, 3, 4)
seq_vezes <- seq(from=0, to=1, length.out=5)
intervalo <- 1:5
a <- c(1,2,3); b <- c(4,5,6)
a + b   # c(5,7,9)
a * 2   # c(2,4,6)
x <- c(1, 2, 3)
x > 1       # c(FALSE, TRUE, TRUE)
x >= 2 & x <= 3   # c(FALSE, TRUE, TRUE)
dados <- c(1, NA, 3)
dados <- na.omit(dados)
mean(dados, na.rm=TRUE)
misto <- c(TRUE, 2, "a")  # convertido para character
f <- factor(c("baixo","médio","alto"), levels=c("baixo","médio","alto"))
levels(f)
table(f)
d <- as.Date("2025-07-09", "%Y-%m-%d")
dt <- as.POSIXct("2025-07-09 15:00:00")
library(lubridate)
ymd("20250709")
mdy("07-09-2025")
hms("15:00:00")
lst <- list(nome="Igor", notas=c(90,95), aprovado=TRUE)
lst[["notas"]]
lst$aprovado
df <- data.frame(id=1:3, nota=c(10,20,15), stringsAsFactors=FALSE)
library(tibble)
tb <- tibble(id=1:3, nota=c(10,20,15))
library(dplyr)
df %>%
filter(nota > 10) %>%
select(id, nota) %>%
mutate(pct = nota / max(nota)) %>%
arrange(desc(pct))
df %>% group_by(id) %>% summarise(nota_media = mean(nota))
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +
geom_point(size=3) +
facet_wrap(~cyl) +
labs(
title = "MPG vs Peso por Cilindro",
x = "Peso (1000 lbs)",
y = "Milhas por Galão"
) +
theme_minimal()
# Histograma com densidade
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
geom_histogram(alpha=0.6, position="identity", bins=30) +
geom_density(alpha=0.4) +
labs(title="Distribuição do Comprimento da Sépala")
modelo <- lm(nota ~ id + I(id^2), data=df)
summary(modelo)
glm_bin <- glm(aprovado ~ nota, family=binomial, data=df)
View(df)
df$aprovado <- df$nota >= 12
glm_bin <- glm(aprovado ~ nota, family = binomial(link = "logit"), data = df)
summary(glm_bin)
View(df)
iris_split <- split(iris, iris$Species)
x <- 10        # atribui 10 a x
y = 5          # atribui 5 a y
pontuacao_aluno <- 90
.variavel_oculta <- 1   # válido, mas desaconselhado
nums <- c(1, 2, 3, 4)
seq_vezes <- seq(from=0, to=1, length.out=5)
intervalo <- 1:5
a <- c(1,2,3); b <- c(4,5,6)
a + b   # c(5,7,9)
a * 2   # c(2,4,6)
x <- c(1, 2, 3)
x > 1       # c(FALSE, TRUE, TRUE)
x >= 2 & x <= 3   # c(FALSE, TRUE, TRUE)
dados <- c(1, NA, 3)
dados <- na.omit(dados)
mean(dados, na.rm=TRUE)
misto <- c(TRUE, 2, "a")  # convertido para character
f <- factor(c("baixo","médio","alto"), levels=c("baixo","médio","alto"))
levels(f)
table(f)
d <- as.Date("2025-07-09", "%Y-%m-%d")
dt <- as.POSIXct("2025-07-09 15:00:00")
library(lubridate)
ymd("20250709")
mdy("07-09-2025")
hms("15:00:00")
lst <- list(nome="Igor", notas=c(90,95), aprovado=TRUE)
lst[["notas"]]
lst$aprovado
df <- data.frame(id=1:3, nota=c(10,20,15), stringsAsFactors=FALSE)
library(tibble)
tb <- tibble(id=1:3, nota=c(10,20,15))
library(dplyr)
df %>%
filter(nota > 10) %>%
select(id, nota) %>%
mutate(pct = nota / max(nota)) %>%
arrange(desc(pct))
df %>% group_by(id) %>% summarise(nota_media = mean(nota))
data()
data(iris)
head(iris)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +
geom_point(size=3) +
facet_wrap(~cyl) +
labs(
title = "MPG vs Peso por Cilindro",
x = "Peso (1000 lbs)",
y = "Milhas por Galão"
) +
theme_minimal()
# Histograma com densidade
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
geom_histogram(alpha=0.6, position="identity", bins=30) +
geom_density(alpha=0.4) +
labs(title="Distribuição do Comprimento da Sépala")
modelo <- lm(nota ~ id + I(id^2), data=df)
summary(modelo)
df$aprovado <- df$nota >= 12
glm_bin <- glm(aprovado ~ nota, family = binomial(link = "logit"), data = df)
summary(glm_bin)
iris_split <- split(iris, iris$Species)
media_sepala <- lapply(iris_split, function(df) mean(df$Sepal.Length))
by(data = iris$Sepal.Length, INDICES = iris$Species, FUN = mean)
tapply(iris$Sepal.Length, iris$Species, mean)
for (i in 1:5) {
print(i^2)
}
cont <- 1
while (cont <= 5) {
print(cont)
cont <- cont + 1
}
repeat {
val <- runif(1)
if (val > 0.9) {
print(val)
break
}
}
x <- -3
if (x > 0) {
message("Positivo")
} else if (x == 0) {
message("Zero")
} else {
message("Negativo")
}
x <- c(-1, 0, 1)
resultado <- ifelse(x > 0, "Positivo", "Não positivo")
resultado
# 1. Carregar e preparar dados
MgDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137")
library(tidyverse)
library(ggpubr)
library(report)
library(rstatix)
library(gsheet)
library(emmeans)
library(multcompView)
library(multcomp)
library(agricolae)
library(DT)
library(DHARMa)
MiceliaDataframe = gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=959387827#gid=959387827")
MiceliaDataframe
# 1. Carregar e preparar dados
MgDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137")
MgDataframeWide <- MgDataframe |>
pivot_wider(names_from = trat, values_from = comp)
# 2. Verificar normalidade em cada grupo
shapiro.test(MgDataframeWide$control)
shapiro.test(MgDataframeWide$Mg2)
# 3. Verificar homogeneidade de variâncias (F‑test)
var.test(MgDataframeWide$control, MgDataframeWide$Mg2)
View(MgDataframe)
MgDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137")
MgDataframeWide <- MgDataframe |>
pivot_wider(names_from = trat, values_from = comp)
shapiro.test(MgDataframeWide$control)
shapiro.test(MgDataframeWide$Mg2)
var.test(MgDataframeWide$control, MgDataframeWide$Mg2)
TResult_base <- t.test(
MgDataframeWide$control,
MgDataframeWide$Mg2,
var.equal = TRUE
)
tidy(TResult_base)
ScaleDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1729131173#gid=1729131173")
Unaided <- ScaleDataframe |> filter(assessment == "Unaided") |> pull(acuracia)
Aided   <- ScaleDataframe |> filter(assessment == "Aided1")  |> pull(acuracia)
differences <- Unaided - Aided
shapiro.test(differences)
ScaleTTest <- t.test(
Unaided,
Aided,
paired  = TRUE,
var.equal = FALSE
)
tidy(ScaleTTest)
ScaleDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1729131173#gid=1729131173")
Unaided <- ScaleDataframe |> filter(assessment == "Unaided") |> pull(acuracia)
Aided   <- ScaleDataframe |> filter(assessment == "Aided1")  |> pull(acuracia)
differences <- Unaided - Aided
shapiro.test(differences)
var.test(Aided, Unaided)
ScaleTTest <- t.test(
Unaided,
Aided,
paired  = TRUE,
var.equal = FALSE
)
tidy(ScaleTTest)
ScaleDataframe <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1729131173#gid=1729131173")
Unaided <- ScaleDataframe |> filter(assessment == "Unaided") |> pull(acuracia)
Aided   <- ScaleDataframe |> filter(assessment == "Aided1")  |> pull(acuracia)
differences <- Unaided - Aided
shapiro.test(differences)
ScaleTTest <- t.test(
Unaided,
Aided,
paired  = TRUE,
var.equal = FALSE
)
tidy(ScaleTTest)
