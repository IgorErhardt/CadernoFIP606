{"title":"Caderno FIP606","markdown":{"yaml":{"title":"Caderno FIP606","warning":false},"headingText":"1. Operações Básicas","containsRefs":false,"markdown":"\n\n\n## 1.1 Atribuição e Variáveis\n\n-   **Operadores de atribuição**: `<-` é o mais usado, embora `=` funcione.\n\n    ```{R}\n    x <- 10        # atribui 10 a x\n    y = 5          # atribui 5 a y\n    ```\n\n-   **Nomes de variáveis**: usam letras, números, `.` e `_`, mas não podem começar com número ou ponto seguido de número. Exemplo:\n\n    ```{R}\n    pontuacao_aluno <- 90\n    .variavel_oculta <- 1   # válido, mas desaconselhado\n    ```\n\n## 1.2 Vetores e Operações Elementares\n\n-   **Criar vetores**: `c()`, `:` e `seq()`.\n\n    ```{R}\n    nums <- c(1, 2, 3, 4)\n    seq_vezes <- seq(from=0, to=1, length.out=5)\n    intervalo <- 1:5\n    ```\n\n-   **Operações aritméticas**:\n\n    ```{R}\n    a <- c(1,2,3); b <- c(4,5,6)\n    a + b   # c(5,7,9)\n    a * 2   # c(2,4,6)\n    ```\n\n-   **Regra de reciclagem**: vetores menores se repetem para igualar o tamanho:\n\n    ``` r\n    c(1,2) + c(1,2,3,4)  # c(2,4,4,6)\n    ```\n\n## 1.3 Operadores Lógicos e de Comparação\n\n-   **Comparação**: `<`, `>`, `<=`, `>=`, `==`, `!=`.\n\n-   **Lógicos**: `&` (E elemento a elemento), `|` (OU elemento a elemento), `!` (NÃO). Use `&&`, `||` para condição única.\n\n    ```{R}\n    x <- c(1, 2, 3)\n    x > 1       # c(FALSE, TRUE, TRUE)\n    x >= 2 & x <= 3   # c(FALSE, TRUE, TRUE)\n    ```\n\n## 1.4 Valores Ausentes e Especiais\n\n-   `NA`: falta de dado; `NaN`: resultado indefinido; `Inf`/`-Inf`: infinito.\n\n-   Funções: `is.na()`, `is.nan()`, `is.finite()`, `is.infinite()`.\n\n-   Tratamento de NAs:\n\n    ```{R}\n    dados <- c(1, NA, 3)\n    dados <- na.omit(dados)\n    mean(dados, na.rm=TRUE)\n    ```\n\n# 2. Estruturas de Dados\n\n## 2.1 Vetores Atômicos e Coerção\n\n-   Tipos: *numeric*, *integer*, *character*, *logical*, *complex*, *raw*.\n\n-   Hierarquia de coerção: *logical -\\> integer -\\> numeric -\\> complex -\\> character*.\n\n    ```{R}\n    misto <- c(TRUE, 2, \"a\")  # convertido para character\n    ```\n\n## 2.2 Fatores\n\n-   Dados categóricos com níveis fixos.\n\n    ```{R}\n    f <- factor(c(\"baixo\",\"médio\",\"alto\"), levels=c(\"baixo\",\"médio\",\"alto\"))\n    levels(f)\n    table(f)\n    ```\n\n-   Converter: `as.character(f)`, `as.numeric(f)`.\n\n## 2.3 Datas e Horários\n\n-   **Date**: `as.Date(\"2025-07-09\")`, formatos `%Y-%m-%d`.\n\n-   **POSIXct/POSIXlt**: data-hora.\n\n    ```{R}\n    d <- as.Date(\"2025-07-09\", \"%Y-%m-%d\")\n    dt <- as.POSIXct(\"2025-07-09 15:00:00\")\n    ```\n\n-   Pacote **lubridate**:\n\n    ```{R}\n    library(lubridate)\n    ymd(\"20250709\")\n    mdy(\"07-09-2025\")\n    hms(\"15:00:00\")\n    ```\n\n## 2.4 Listas\n\n-   Coleções heterogêneas ordenadas.\n\n-   Acesso: `[[ ]]` ou `$`.\n\n    ```{R}\n    lst <- list(nome=\"Igor\", notas=c(90,95), aprovado=TRUE)\n    lst[[\"notas\"]]\n    lst$aprovado\n    ```\n\n## 2.5 Data Frames e Tibbles\n\n-   Tabelas bidimensionais heterogêneas.\n\n    ```{R}\n    df <- data.frame(id=1:3, nota=c(10,20,15), stringsAsFactors=FALSE)\n    ```\n\n-   **Tibbles**:\n\n    ```{R}\n    library(tibble)\n    tb <- tibble(id=1:3, nota=c(10,20,15))\n    ```\n\n-   Inspeção: `str()`, `head()`, `glimpse()`.\n\n## 2.6 Matrizes e Arrays\n\n-   **Matriz**: bidimensional homogênea (`matrix()`).\n-   **Array**: estruturas com múltiplas dimensões (`array()`).\n-   Acesso: `[linha, coluna]` ou `[i,j,k]`.\n\n# 3. Importação e Manipulação de Dados\n\n## 3.1 Leitura de Dados\n\n-   CSV: `read.csv()`, `read_csv()` (readr).\n-   Excel: `readxl::read_excel()`.\n-   Alta performance: `data.table::fread()`, `vroom::vroom()`.\n\n## 3.2 Princípios de Dados Tidy\n\n-   Cada variável em uma coluna, cada observação em uma linha.\n-   **tidyr**:\n    -   `pivot_longer()`, `pivot_wider()`\n    -   `separate()`, `unite()`\n\n## 3.3 Workflow dplyr\n\n```{R}\nlibrary(dplyr)\ndf %>%\n  filter(nota > 10) %>%\n  select(id, nota) %>%\n  mutate(pct = nota / max(nota)) %>%\n  arrange(desc(pct))\n```\n\n-   Operações agrupadas:\n\n    ```{R}\n    df %>% group_by(id) %>% summarise(nota_media = mean(nota))\n    ```\n\n## 3.4 Conjuntos de Dados Embutidos\n\nO R disponibiliza diversos conjuntos de dados (datasets) prontos para uso, úteis para exemplos e testes:\n\n-   **iris**: medidas de sépalas e pétalas de três espécies de íris.\n-   **mtcars**: características de desempenho de diversos modelos de automóveis.\n-   **airquality**: medições diárias de qualidade do ar em Nova York.\n\nPara listar todos os datasets embutidos, use: data()\n\nPara carregar explicitamente um dataset:\n\n```{R}\ndata(iris)\nhead(iris)\n```\n\n# 4. Gráficos com ggplot2\n\n## 4.1 Componentes Básicos\n\n-   **ggplot(dados, aes(...))**: define dados e mapeamentos.\n-   Camadas **geom**: `geom_point()`, `geom_line()`, `geom_bar()`, `geom_histogram()`.\n-   Facetas: `facet_wrap()`, `facet_grid()`.\n\n## 4.2 Customização\n\n-   Temas: `theme_minimal()`, `theme_classic()`.\n-   Rótulos: `labs(title=, subtitle=, x=, y=, caption=)`.\n-   Legendas: `theme(legend.position = \"bottom\")`.\n\n## 4.3 Exemplos\n\n```{R}\nlibrary(ggplot2)\nggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +\n  geom_point(size=3) +\n  facet_wrap(~cyl) +\n  labs(\n    title = \"MPG vs Peso por Cilindro\",\n    x = \"Peso (1000 lbs)\",\n    y = \"Milhas por Galão\"\n  ) +\n  theme_minimal()\n```\n\n```{R}\n# Histograma com densidade\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram(alpha=0.6, position=\"identity\", bins=30) +\n  geom_density(alpha=0.4) +\n  labs(title=\"Distribuição do Comprimento da Sépala\")\n```\n\n# 5. Modelagem Estatística Básica\n\n## 5.1 Modelos Lineares (lm)\n\n```{R}\nmodelo <- lm(nota ~ id + I(id^2), data=df)\nsummary(modelo)\n```\n\n-   Interpretar coeficientes, p-valores, R² e resíduos.\n-   Diagnósticos: `plot(modelo)`.\n\n## 5.2 Modelos Lineares Generalizados (glm)\n\n```{R}\ndf$aprovado <- df$nota >= 12\nglm_bin <- glm(aprovado ~ nota, family = binomial(link = \"logit\"), data = df)\nsummary(glm_bin)\n```\n\n-   Familias: `binomial`, `poisson`, `Gamma`.\n-   Links: `logit`, `log`, `identity`.\n\n## 5.3 Avaliação de Modelos\n\n-   **Análise de resíduos**: `plot(modelo)`, **DHARMa** para GLMs.\n-   **Critérios de informação**: `AIC(modelo)`, `BIC(modelo)`.\n-   **Validação cruzada**: `caret::train()` ou **tidymodels**.\n\n# 6. Estruturas de Controle: Agrupamento, Loops e Condicionais\n\n## 6.1 Agrupamento com split, lapply, by e tapply\n\n-   **split()**: divide dados em grupos:\n\n    ```{R}\n    iris_split <- split(iris, iris$Species)\n    ```\n\n-   **lapply()**: aplica função a cada elemento:\n\n    ```{R}\n    media_sepala <- lapply(iris_split, function(df) mean(df$Sepal.Length))\n    ```\n\n-   **by()**: aplica função por grupos em data frame:\n\n    ```{R}\n    by(data = iris$Sepal.Length, INDICES = iris$Species, FUN = mean)\n    ```\n\n-   **tapply()**: aplica função a subsets de um vetor:\n\n    ```{R}\n    tapply(iris$Sepal.Length, iris$Species, mean)\n    ```\n\n## 6.2 Loops\n\n-   **for**:\n\n    ```{R}\n    for (i in 1:5) {\n      print(i^2)\n    }\n    ```\n\n-   **while**:\n\n    ```{R}\n    cont <- 1\n    while (cont <= 5) {\n      print(cont)\n      cont <- cont + 1\n    }\n    ```\n\n-   **repeat** (até break):\n\n    ```{R}\n    repeat {\n      val <- runif(1)\n      if (val > 0.9) {\n        print(val)\n        break\n      }\n    }\n    ```\n\n## 6.3 Condicionais\n\n-   **if / else**:\n\n    ```{R}\n    x <- -3\n    if (x > 0) {\n      message(\"Positivo\")\n    } else if (x == 0) {\n      message(\"Zero\")\n    } else {\n      message(\"Negativo\")\n    }\n    ```\n\n-   **ifelse()** (vetorizado):\n\n    ```{R}\n    x <- c(-1, 0, 1)\n    resultado <- ifelse(x > 0, \"Positivo\", \"Não positivo\")\n    resultado\n    ```\n\n## 6.4 Boas Práticas\n\n-   Prefira funções vetorizadas (`apply`, `lapply`, `sapply`) em vez de loops explícitos.\n-   Use nomes descritivos e indentação consistente.\n-   Evite aninhamentos profundos; crie funções para lógicas complexas.\n","srcMarkdownNoYaml":"\n\n# 1. Operações Básicas\n\n## 1.1 Atribuição e Variáveis\n\n-   **Operadores de atribuição**: `<-` é o mais usado, embora `=` funcione.\n\n    ```{R}\n    x <- 10        # atribui 10 a x\n    y = 5          # atribui 5 a y\n    ```\n\n-   **Nomes de variáveis**: usam letras, números, `.` e `_`, mas não podem começar com número ou ponto seguido de número. Exemplo:\n\n    ```{R}\n    pontuacao_aluno <- 90\n    .variavel_oculta <- 1   # válido, mas desaconselhado\n    ```\n\n## 1.2 Vetores e Operações Elementares\n\n-   **Criar vetores**: `c()`, `:` e `seq()`.\n\n    ```{R}\n    nums <- c(1, 2, 3, 4)\n    seq_vezes <- seq(from=0, to=1, length.out=5)\n    intervalo <- 1:5\n    ```\n\n-   **Operações aritméticas**:\n\n    ```{R}\n    a <- c(1,2,3); b <- c(4,5,6)\n    a + b   # c(5,7,9)\n    a * 2   # c(2,4,6)\n    ```\n\n-   **Regra de reciclagem**: vetores menores se repetem para igualar o tamanho:\n\n    ``` r\n    c(1,2) + c(1,2,3,4)  # c(2,4,4,6)\n    ```\n\n## 1.3 Operadores Lógicos e de Comparação\n\n-   **Comparação**: `<`, `>`, `<=`, `>=`, `==`, `!=`.\n\n-   **Lógicos**: `&` (E elemento a elemento), `|` (OU elemento a elemento), `!` (NÃO). Use `&&`, `||` para condição única.\n\n    ```{R}\n    x <- c(1, 2, 3)\n    x > 1       # c(FALSE, TRUE, TRUE)\n    x >= 2 & x <= 3   # c(FALSE, TRUE, TRUE)\n    ```\n\n## 1.4 Valores Ausentes e Especiais\n\n-   `NA`: falta de dado; `NaN`: resultado indefinido; `Inf`/`-Inf`: infinito.\n\n-   Funções: `is.na()`, `is.nan()`, `is.finite()`, `is.infinite()`.\n\n-   Tratamento de NAs:\n\n    ```{R}\n    dados <- c(1, NA, 3)\n    dados <- na.omit(dados)\n    mean(dados, na.rm=TRUE)\n    ```\n\n# 2. Estruturas de Dados\n\n## 2.1 Vetores Atômicos e Coerção\n\n-   Tipos: *numeric*, *integer*, *character*, *logical*, *complex*, *raw*.\n\n-   Hierarquia de coerção: *logical -\\> integer -\\> numeric -\\> complex -\\> character*.\n\n    ```{R}\n    misto <- c(TRUE, 2, \"a\")  # convertido para character\n    ```\n\n## 2.2 Fatores\n\n-   Dados categóricos com níveis fixos.\n\n    ```{R}\n    f <- factor(c(\"baixo\",\"médio\",\"alto\"), levels=c(\"baixo\",\"médio\",\"alto\"))\n    levels(f)\n    table(f)\n    ```\n\n-   Converter: `as.character(f)`, `as.numeric(f)`.\n\n## 2.3 Datas e Horários\n\n-   **Date**: `as.Date(\"2025-07-09\")`, formatos `%Y-%m-%d`.\n\n-   **POSIXct/POSIXlt**: data-hora.\n\n    ```{R}\n    d <- as.Date(\"2025-07-09\", \"%Y-%m-%d\")\n    dt <- as.POSIXct(\"2025-07-09 15:00:00\")\n    ```\n\n-   Pacote **lubridate**:\n\n    ```{R}\n    library(lubridate)\n    ymd(\"20250709\")\n    mdy(\"07-09-2025\")\n    hms(\"15:00:00\")\n    ```\n\n## 2.4 Listas\n\n-   Coleções heterogêneas ordenadas.\n\n-   Acesso: `[[ ]]` ou `$`.\n\n    ```{R}\n    lst <- list(nome=\"Igor\", notas=c(90,95), aprovado=TRUE)\n    lst[[\"notas\"]]\n    lst$aprovado\n    ```\n\n## 2.5 Data Frames e Tibbles\n\n-   Tabelas bidimensionais heterogêneas.\n\n    ```{R}\n    df <- data.frame(id=1:3, nota=c(10,20,15), stringsAsFactors=FALSE)\n    ```\n\n-   **Tibbles**:\n\n    ```{R}\n    library(tibble)\n    tb <- tibble(id=1:3, nota=c(10,20,15))\n    ```\n\n-   Inspeção: `str()`, `head()`, `glimpse()`.\n\n## 2.6 Matrizes e Arrays\n\n-   **Matriz**: bidimensional homogênea (`matrix()`).\n-   **Array**: estruturas com múltiplas dimensões (`array()`).\n-   Acesso: `[linha, coluna]` ou `[i,j,k]`.\n\n# 3. Importação e Manipulação de Dados\n\n## 3.1 Leitura de Dados\n\n-   CSV: `read.csv()`, `read_csv()` (readr).\n-   Excel: `readxl::read_excel()`.\n-   Alta performance: `data.table::fread()`, `vroom::vroom()`.\n\n## 3.2 Princípios de Dados Tidy\n\n-   Cada variável em uma coluna, cada observação em uma linha.\n-   **tidyr**:\n    -   `pivot_longer()`, `pivot_wider()`\n    -   `separate()`, `unite()`\n\n## 3.3 Workflow dplyr\n\n```{R}\nlibrary(dplyr)\ndf %>%\n  filter(nota > 10) %>%\n  select(id, nota) %>%\n  mutate(pct = nota / max(nota)) %>%\n  arrange(desc(pct))\n```\n\n-   Operações agrupadas:\n\n    ```{R}\n    df %>% group_by(id) %>% summarise(nota_media = mean(nota))\n    ```\n\n## 3.4 Conjuntos de Dados Embutidos\n\nO R disponibiliza diversos conjuntos de dados (datasets) prontos para uso, úteis para exemplos e testes:\n\n-   **iris**: medidas de sépalas e pétalas de três espécies de íris.\n-   **mtcars**: características de desempenho de diversos modelos de automóveis.\n-   **airquality**: medições diárias de qualidade do ar em Nova York.\n\nPara listar todos os datasets embutidos, use: data()\n\nPara carregar explicitamente um dataset:\n\n```{R}\ndata(iris)\nhead(iris)\n```\n\n# 4. Gráficos com ggplot2\n\n## 4.1 Componentes Básicos\n\n-   **ggplot(dados, aes(...))**: define dados e mapeamentos.\n-   Camadas **geom**: `geom_point()`, `geom_line()`, `geom_bar()`, `geom_histogram()`.\n-   Facetas: `facet_wrap()`, `facet_grid()`.\n\n## 4.2 Customização\n\n-   Temas: `theme_minimal()`, `theme_classic()`.\n-   Rótulos: `labs(title=, subtitle=, x=, y=, caption=)`.\n-   Legendas: `theme(legend.position = \"bottom\")`.\n\n## 4.3 Exemplos\n\n```{R}\nlibrary(ggplot2)\nggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) +\n  geom_point(size=3) +\n  facet_wrap(~cyl) +\n  labs(\n    title = \"MPG vs Peso por Cilindro\",\n    x = \"Peso (1000 lbs)\",\n    y = \"Milhas por Galão\"\n  ) +\n  theme_minimal()\n```\n\n```{R}\n# Histograma com densidade\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram(alpha=0.6, position=\"identity\", bins=30) +\n  geom_density(alpha=0.4) +\n  labs(title=\"Distribuição do Comprimento da Sépala\")\n```\n\n# 5. Modelagem Estatística Básica\n\n## 5.1 Modelos Lineares (lm)\n\n```{R}\nmodelo <- lm(nota ~ id + I(id^2), data=df)\nsummary(modelo)\n```\n\n-   Interpretar coeficientes, p-valores, R² e resíduos.\n-   Diagnósticos: `plot(modelo)`.\n\n## 5.2 Modelos Lineares Generalizados (glm)\n\n```{R}\ndf$aprovado <- df$nota >= 12\nglm_bin <- glm(aprovado ~ nota, family = binomial(link = \"logit\"), data = df)\nsummary(glm_bin)\n```\n\n-   Familias: `binomial`, `poisson`, `Gamma`.\n-   Links: `logit`, `log`, `identity`.\n\n## 5.3 Avaliação de Modelos\n\n-   **Análise de resíduos**: `plot(modelo)`, **DHARMa** para GLMs.\n-   **Critérios de informação**: `AIC(modelo)`, `BIC(modelo)`.\n-   **Validação cruzada**: `caret::train()` ou **tidymodels**.\n\n# 6. Estruturas de Controle: Agrupamento, Loops e Condicionais\n\n## 6.1 Agrupamento com split, lapply, by e tapply\n\n-   **split()**: divide dados em grupos:\n\n    ```{R}\n    iris_split <- split(iris, iris$Species)\n    ```\n\n-   **lapply()**: aplica função a cada elemento:\n\n    ```{R}\n    media_sepala <- lapply(iris_split, function(df) mean(df$Sepal.Length))\n    ```\n\n-   **by()**: aplica função por grupos em data frame:\n\n    ```{R}\n    by(data = iris$Sepal.Length, INDICES = iris$Species, FUN = mean)\n    ```\n\n-   **tapply()**: aplica função a subsets de um vetor:\n\n    ```{R}\n    tapply(iris$Sepal.Length, iris$Species, mean)\n    ```\n\n## 6.2 Loops\n\n-   **for**:\n\n    ```{R}\n    for (i in 1:5) {\n      print(i^2)\n    }\n    ```\n\n-   **while**:\n\n    ```{R}\n    cont <- 1\n    while (cont <= 5) {\n      print(cont)\n      cont <- cont + 1\n    }\n    ```\n\n-   **repeat** (até break):\n\n    ```{R}\n    repeat {\n      val <- runif(1)\n      if (val > 0.9) {\n        print(val)\n        break\n      }\n    }\n    ```\n\n## 6.3 Condicionais\n\n-   **if / else**:\n\n    ```{R}\n    x <- -3\n    if (x > 0) {\n      message(\"Positivo\")\n    } else if (x == 0) {\n      message(\"Zero\")\n    } else {\n      message(\"Negativo\")\n    }\n    ```\n\n-   **ifelse()** (vetorizado):\n\n    ```{R}\n    x <- c(-1, 0, 1)\n    resultado <- ifelse(x > 0, \"Positivo\", \"Não positivo\")\n    resultado\n    ```\n\n## 6.4 Boas Práticas\n\n-   Prefira funções vetorizadas (`apply`, `lapply`, `sapply`) em vez de loops explícitos.\n-   Use nomes descritivos e indentação consistente.\n-   Evite aninhamentos profundos; crie funções para lógicas complexas.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"IntroR.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title":"Caderno FIP606"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}